// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  password       String
  email          String           @unique
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  Bids           Bid[]
  Notifications  Notification[]
}

model Item {
  id             Int              @id @default(autoincrement())
  name           String
  description    String           @db.Text
  startingPrice  Decimal          @db.Decimal(10, 2)
  currentPrice   Decimal          @db.Decimal(10, 2)
  imageUrl       String?
  endTime        DateTime
  createdAt      DateTime         @default(now())
  Bids           Bid[]
}

model Bid {
  id            Int               @id @default(autoincrement())
  itemId        Int
  userId        Int
  bidAmount     Decimal
  createdAt     DateTime          @default(now())
  user          User              @relation(fields: [userId], references: [id])
  item          Item              @relation(fields: [itemId], references: [id])
}

model Notification {
  id            Int               @id @default(autoincrement())
  userId        Int
  message       String
  isRead        Boolean           @default(false)
  createdAt     DateTime          @default(now())
  user          User              @relation(fields: [userId], references: [id])
}

// Application-Level Handling:
//async createItem(userId, data) {
//  data.current_price = data.starting_price;
//  data.user_id = userId;
// return await this.itemRepository.createItem(data);
//}
