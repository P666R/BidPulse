// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Status {
  active
  ended
}

model User {
  id             String           @id @default(uuid())
  username       String           @unique
  password       String
  email          String           @unique
  role           Role             @default(user)
  isEmailVerified Boolean         @default(false)
  createdAt      DateTime         @default(now())
  Bids           Bid[]
  Notifications  Notification[]
  verifyResetTokens VerifyResetToken[]

  @@index([username])
  @@index([email])
}

model VerifyResetToken {
  id            String            @id @default(uuid()) 
  userId        String
  token         String
  createdAt     DateTime          @default(now())
  user          User              @relation(fields: [userId], references: [id])

  @@unique([userId, token])
}

model Item {
  id             String           @id @default(uuid())
  name           String
  description    String           @db.Text
  startingPrice  Decimal          @db.Decimal(10, 2)
  currentPrice   Decimal          @db.Decimal(10, 2) @default(0)
  imageUrl       String?
  status         Status           @default(active)
  endTime        DateTime
  createdAt      DateTime         @default(now())
  Bids           Bid[]

  @@index([name])
}

model Bid {
  id            String            @id @default(uuid())
  itemId        String
  userId        String
  bidAmount     Decimal
  createdAt     DateTime          @default(now())
  user          User              @relation(fields: [userId], references: [id])
  item          Item              @relation(fields: [itemId], references: [id])

  @@index([userId])
  @@index([itemId])
}

model Notification {
  id            String            @id @default(uuid())
  userId        String
  message       String
  isRead        Boolean           @default(false)
  createdAt     DateTime          @default(now())
  user          User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
}